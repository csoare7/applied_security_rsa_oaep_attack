import sys, subprocess, hashlib
import string
import math

def MGF(mgfSeed, maskLen) :
  hLen = 40
  if (maskLen > 2**32) :
    return "Mask too long"

  T = ""

  for counter in range(0, ((maskLen + hLen - 1) / hLen)-1) :
    #print(range(0, (maskLen / 40) - 1))
    c = I20SP(counter, 4)
    #print("c ", c)
    hash = hashlib.sha1(mgfSeed + c).hexdigest()
    #print("hash, ", hash)
    T += hash
  #print(T)
  return T[:maskLen]

def I20SP(x, xLen) :
  #xLen is 4
  if x >= (256**(xLen-1)):
    return 

  result = "%x" % x
  return result.zfill(2*xLen)

def readFile(src) :
  file = open(src, "r")
  array = []
  for line in file:
    array.append(line)
  file.close
  return ( array[0], array[1], array[2] ) #return N, e, c

def interact( c ) :

  if(len(c) != 256):
    cc = c.zfill(256)
    #print (cc)
    target_in.write( "%s\n" % ( cc ) ) ; target_in.flush()
  else:
  # Send      G      to   attack target.
    target_in.write( "%s\n" % ( c ) ) ; target_in.flush()

  # Receive error code from attack target.
  error_code = ( target_out.readline().strip() )
  
  return ( error_code )

def attack(N_s, e_s, c_s) :
  
  f = 1
  e = int(e_s, 16)
  N = int(N_s, 16)
  c = int(c_s, 16)

  ################
  
  k = int(math.ceil(math.log(N, 256)))
  #print(k)
  B = pow(2,(8*(k-1)))
  #print("b",type(B))
  #################
  ##  Step 1    ###
  #################
  error_code = 0
  while (error_code != '1'):
    f *= 2
    c_res = str(hex((pow(f, e, N) * c ) % N)[2:-1])  
    ( error_code) = interact( c_res )
    # print "code = %s" % error_code 
    # print f 
  
  # #################
  # ##    Step 2   ##
  # #################

  f2 = (N+B)/B * f/2

  c_res1 = str(hex((pow(f2, e, N) * c ) % N)[2:-1])
  ( error_code) = interact( c_res1 )

  if (error_code == '2'):
    print "code = %s" % error_code #err code 2

  while (error_code != '2'):
    f2 += f/2
    c_res = str(hex((pow(f2, e, N) * c ) % N)[2:-1])
    ( error_code) = interact( c_res )
    ##if (error_code == '2'):
      # print "code = %s" % error_code #err code 2
      # print f2

  # #################
  # ##    Step 3   ##
  # #################

  m_min = (N+f2-1) / f2
  m_max = ((N+B) / f2)

  if (m_min == m_max):
    return m_max

  while (m_min != m_max):
    #print(m_max - m_min)
    f_tmp = (2*B / (m_max - m_min))

    i = (f_tmp * m_min / N)

    f3 = ((i*N)+m_min - 1 ) / m_min

    c_res = str(hex((pow(f3, e, N) * c ) % N)[2:-1])
    ( error_code) = interact( c_res )

    if (error_code == '1'):
      m_min = ( (i * N) + B + f3 -1 ) / f3 
      #print( m_min)
    if (error_code == '2'):
      m_max = ( ( i * N ) + B ) / f3  
      #print( m_max)
    if (m_min == m_max):
      # print("max:", m_max)
      # print("min", m_min)
      #print(hex(m_max))
      EM = hex(m_max).strip("L")[2:]
      if len(EM) != 256: 
         EM = EM.zfill(256)
      # print(len(EM))
      # print(EM)
      break
  
  ####################
  ##    DECODE EM   ##
  ####################
  #print(EM)

  Y = EM[:2]

  if (Y != '00') :
    return

  maskedSeed = EM[2:42]

  maskedDB = EM[42:]
  #print(maskedDB)

  seed = str(hex(int(maskedSeed, 16) ^ int(MGF(maskedDB, k-40-1), 16)))[2:-1]
  
  DB = str(hex(int(maskedDB, 16) ^ int(MGF(seed, k-40-1), 16)))[2:-1]
  # dbMask = MGF(seed, k-40-1)

  print(DB)
  

if ( __name__ == "__main__" ) :
  # Produce a sub-process representing the attack target.
  target = subprocess.Popen( args   = sys.argv[ 1 ],
                             stdout = subprocess.PIPE, 
                             stdin  = subprocess.PIPE )

  # Construct handles to attack target standard input and output.
  target_out = target.stdout
  target_in  = target.stdin

  (N, e, c) = readFile(sys.argv[2])

  # Execute a function representing the attacker.
  attack(N, e, c)

